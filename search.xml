<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>动态规划 &lt;dp 算法&gt;</title>
    <url>/2022/12/02/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%20(dp%E7%AE%97%E6%B3%95)/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>排序算法</title>
    <url>/2022/12/04/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="2022-12-04"><a href="#2022-12-04" class="headerlink" title="2022 - 12 - 04"></a>2022 - 12 - 04</h1><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><h3 id="一、选择排序"><a href="#一、选择排序" class="headerlink" title="一、选择排序"></a>一、选择排序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment">	用选择法对10个整数从小到大排序。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getSmallest</span><span class="hljs-params">(<span class="hljs-type">int</span> a[], <span class="hljs-type">int</span> n)</span> </span>&#123;<br>    <span class="hljs-type">int</span> k = <span class="hljs-number">0</span>, min = a[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; ++i)<br>        <span class="hljs-keyword">if</span>(min &gt; a[i]) &#123;<br>            min = a[i];<br>            k = i;<br>        &#125;<br>    <span class="hljs-keyword">return</span> k;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-type">int</span>&amp; a, <span class="hljs-type">int</span>&amp; b)</span> </span>&#123;<br>    <span class="hljs-type">int</span> temp = a;<br>    a = b;<br>    b = temp;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a[<span class="hljs-number">10</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i)<br>        cin &gt;&gt; a[i];<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i) &#123;<br>        <span class="hljs-built_in">swap</span>(a[i], a[<span class="hljs-built_in">getSmallest</span>(a + i, <span class="hljs-number">10</span> - i) + i]);<br>    &#125;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i) &#123;<br>        cout &lt;&lt; a[i] &lt;&lt; endl;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><strong>选择排序的思想极其简单，每一步都把一个最大&#x2F;小元素放到前面。</strong></p>
<p><strong>每次循环中，从当前数组中找到最大&#x2F;小值后将其与当前数组的第一个交换，之后缩小数组范围。</strong></p>
<p><strong>缩小数组范围是因为我们已经将最大&#x2F;小值提取到第一个，就可以不再考虑第一个数，因为它已经排好序了。</strong></p>
<h3 id="二、蓝桥杯算法提高-选择排序"><a href="#二、蓝桥杯算法提高-选择排序" class="headerlink" title="二、蓝桥杯算法提高-选择排序"></a>二、<strong>蓝桥杯算法提高-选择排序</strong></h3><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment">	排序，顾名思义，是将若干个元素按其大小关系排出一个顺序。形式化描述如下：</span><br><span class="hljs-comment">	</span><br><span class="hljs-comment">	有n个元素a[1]，a[2]，…，a[n]，</span><br><span class="hljs-comment">	</span><br><span class="hljs-comment">	从小到大排序就是将它们排成一个新顺序a[i[1]]&lt; a[i[2]]&lt; …&lt; a[i[n]]</span><br><span class="hljs-comment">	</span><br><span class="hljs-comment">	i[k]为这个新顺序。</span><br><span class="hljs-comment">	</span><br><span class="hljs-comment">	选择排序的思想极其简单，每一步都把一个最小元素放到前面，如果有多个相等的最小元素，选择排位较考前的放到当前头部。</span><br><span class="hljs-comment">	</span><br><span class="hljs-comment">	还是那个例子：&#123;3  1  5  4  2&#125;：</span><br><span class="hljs-comment">	</span><br><span class="hljs-comment">	第一步将1放到开头（第一个位置），也就是交换3和1，</span><br><span class="hljs-comment">	即swap(a[0],a[1])得到&#123;1  3  5  4  2&#125;</span><br><span class="hljs-comment">	</span><br><span class="hljs-comment">	第二步将2放到第二个位置，也就是交换3和2，</span><br><span class="hljs-comment">	即swap(a[1],a[4])得到&#123;1  2  5  4  3&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">	第三步将3放到第三个位置，也就是交换5和3，</span><br><span class="hljs-comment">	即swap(a[2],a[4])得到&#123;1  2  3  4  5&#125;</span><br><span class="hljs-comment">	</span><br><span class="hljs-comment">	第四步将4放到第四个位置，也就是交换4和4，</span><br><span class="hljs-comment">	即swap(a[3],a[3])得到&#123;1  2  3  4  5&#125;</span><br><span class="hljs-comment">	</span><br><span class="hljs-comment">	第五步将5放到第五个位置，也就是交换5和5，</span><br><span class="hljs-comment">	即swap(a[4],a[4])得到&#123;1  2  3  4  5&#125;</span><br><span class="hljs-comment">	</span><br><span class="hljs-comment">	输入n个整数，输出选择排序的全过程。</span><br><span class="hljs-comment">	要求使用递归实现。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-type">int</span>&amp; a, <span class="hljs-type">int</span>&amp; b)</span> </span>&#123;<br>    <span class="hljs-type">int</span> tep = a;<br>    a = b;<br>    b = tep;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getSmallest</span><span class="hljs-params">(<span class="hljs-type">int</span> a[], <span class="hljs-type">int</span> n)</span> </span>&#123;<br>    <span class="hljs-type">int</span> k = <span class="hljs-number">0</span>, min = a[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; ++i) &#123;<br>        <span class="hljs-keyword">if</span>(min &gt; a[i]) &#123;<br>            min = a[i];<br>            k = i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> k; <br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">selectionSort</span><span class="hljs-params">(<span class="hljs-type">int</span> a[], <span class="hljs-type">int</span> n)</span> </span>&#123;<br>    <span class="hljs-type">static</span> <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">static</span> <span class="hljs-type">int</span>* c = a;<br>    <br>    <span class="hljs-keyword">if</span>(i &gt; n - <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> ;<br>    <br>    <span class="hljs-type">int</span> x = <span class="hljs-built_in">getSmallest</span>(a, n - i);<br>    <span class="hljs-built_in">swap</span>(a[<span class="hljs-number">0</span>], a[x]);<br>    <br>    cout &lt;&lt; <span class="hljs-string">&quot;swap(a[&quot;</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot;], a[&quot;</span> &lt;&lt; x + i<br>        &lt;&lt; <span class="hljs-string">&quot;]):&quot;</span>;<br>        <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i)<br>        cout &lt;&lt; c[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    cout &lt;&lt; endl;<br>    <br>    ++ i;<br>    <span class="hljs-built_in">selectionSort</span>(a + <span class="hljs-number">1</span>, n);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a[<span class="hljs-number">100</span>];<br>    <span class="hljs-type">int</span> n; cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>        cin &gt;&gt; a[i];<br>    &#125;<br>    <span class="hljs-built_in">selectionSort</span>(a, n);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><h3 id="一、数据结构-直接插入排序"><a href="#一、数据结构-直接插入排序" class="headerlink" title="一、数据结构-直接插入排序"></a>一、<strong>数据结构-直接插入排序</strong></h3><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n; cin &gt;&gt; n;<br>    <span class="hljs-type">int</span> a[<span class="hljs-number">1000</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i)<br>        cin &gt;&gt; a[i];<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; ++i) &#123;<br>        <span class="hljs-type">int</span> key = a[i];<br>        <span class="hljs-type">int</span> j = i - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(j &gt; <span class="hljs-number">-1</span> &amp;&amp; key &lt; a[j]) &#123;<br>            a[j + <span class="hljs-number">1</span>] = a[j];<br>            --j;<br>        &#125;<br>        a[j + <span class="hljs-number">1</span>] = key;<br>    &#125;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i)<br>        cout &lt;&lt; a[i] &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>    cout &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><strong>直接插入排序是一种最简单的排序方法，它的基本操作是将一个数组看作两个表，</strong></p>
<p><strong>我们将后一个表的数一一插入到已经排好序的有序表中，</strong></p>
<p><strong>从而得到一个新的且记录数增加了 1 的有序表。</strong></p>
<p><strong>在一开始我们认为数组的第一个值为这个已经排序好的表。</strong></p>
<p><strong>接下来从第二个开始我们将他和表中的数比较找到位置后插入表中。</strong></p>
<p><strong>具体操作为如果表后第一个数 key 小于前一个数就将他俩交换位置，</strong></p>
<p><strong>直到 key 前没有大于它的数。</strong></p>
<p><strong>注意：在循环中 a[i] 的值一直在变。</strong></p>
<h3 id="二、蓝桥杯算法提高-插入排序"><a href="#二、蓝桥杯算法提高-插入排序" class="headerlink" title="二、蓝桥杯算法提高-插入排序"></a>二、蓝桥杯算法提高-插入排序</h3><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment">	排序，顾名思义，是将若干个元素按其大小关系排出一个顺序。形式化描述如下：</span><br><span class="hljs-comment">	有n个元素a[1]，a[2]，…，a[n]，从小到大排序就是将它们排成一个新顺序</span><br><span class="hljs-comment">	a[i[1]]&lt; a[i[2]]&lt; …&lt; a[i[n]]</span><br><span class="hljs-comment">	i[k]为这个新顺序。</span><br><span class="hljs-comment">	插入排序，顾名思义，是通过插入操作完成排序。其直觉和方法来源于打牌时安排</span><br><span class="hljs-comment">	牌的方法。每次摸起一张牌，你都会将其插入到现在手牌中它按顺序应在的那个位</span><br><span class="hljs-comment">	置。插入排序每一步都类似这个摸牌过程。</span><br><span class="hljs-comment">	比如现在有整数数组：&#123;3,  1,  5,  4,  2&#125;</span><br><span class="hljs-comment">    第一步：插入3  得到新序列&#123;3&#125;</span><br><span class="hljs-comment">    第二步：插入1  得到新序列&#123;1  3&#125;</span><br><span class="hljs-comment">    第三步：插入5  得到新序列&#123;1  3  5&#125;</span><br><span class="hljs-comment">    第四步：插入4  得到新序列&#123;1  3  4  5&#125;</span><br><span class="hljs-comment">    第五步：插入2  得到新序列&#123;1  2  3  4  5&#125;</span><br><span class="hljs-comment">    为了看程序中如何完成插入过程，我们以第五步为例：</span><br><span class="hljs-comment">    初始时：1  3  4  5  2</span><br><span class="hljs-comment">    将2存入临时变量tmp</span><br><span class="hljs-comment">    将下标j指向2之前的元素5，然后根据tmp和a[j]的大小关系决定该元素是否应该后移。</span><br><span class="hljs-comment">    如果a[j]&gt; tmp，则将a[j]后移到a[j+1]，序列变成1  3  4  5  5。</span><br><span class="hljs-comment">    将下标j前移</span><br><span class="hljs-comment">    判断a[j]&gt; tmp，后移a[j]到a[j+1]，得到1  3  4  4  5</span><br><span class="hljs-comment">    将下标j前移</span><br><span class="hljs-comment">    判断a[j]&gt; tmp，后移a[j]到a[j+1]，得到1  3  3  4  5</span><br><span class="hljs-comment">    因为a[j]&lt; =tmp，所以将tmp放回a[j+1]，得到  1  2  3  4  5</span><br><span class="hljs-comment">    现在，输入n个整数，根据以上算法，输出插入排序的全过程。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-type">int</span> a[], <span class="hljs-type">int</span> n)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i)<br>        cout &lt;&lt; a[i] &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>    cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n; cin &gt;&gt; n;<br>    <span class="hljs-type">int</span> a[<span class="hljs-number">100</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i)<br>        cin &gt;&gt; a[i];<br>    cout &lt;&lt; <span class="hljs-string">&quot;Insert element[1]:\n&quot;</span> &lt;&lt; <span class="hljs-string">&quot;Init:&quot;</span><br>        &lt;&lt; a[<span class="hljs-number">0</span>] &lt;&lt; <span class="hljs-string">&quot;\nFinal:&quot;</span> &lt;&lt; a[<span class="hljs-number">0</span>] &lt;&lt; endl;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; ++i) &#123;<br>        <span class="hljs-type">int</span> key = a[i];<br>        <span class="hljs-type">int</span> j = i - <span class="hljs-number">1</span>;<br>        cout &lt;&lt; <span class="hljs-string">&quot;Insert element[&quot;</span> &lt;&lt; i + <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-string">&quot;]:&quot;</span> &lt;&lt; endl;<br>        cout &lt;&lt; <span class="hljs-string">&quot;Init:&quot;</span>;<br>        <span class="hljs-built_in">print</span>(a, i + <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">while</span>(j &gt; <span class="hljs-number">-1</span> &amp;&amp; key &lt; a[j]) &#123;<br>            a[j + <span class="hljs-number">1</span>] = a[j];<br>            j--;<br>            cout &lt;&lt; <span class="hljs-string">&quot;Move  back:&quot;</span>;<br>            <span class="hljs-built_in">print</span>(a, i + <span class="hljs-number">1</span>);<br>        &#125;<br>        a[j + <span class="hljs-number">1</span>] = key;<br>        cout &lt;&lt; <span class="hljs-string">&quot;Final:&quot;</span>;<br>        <span class="hljs-built_in">print</span>(a, i + <span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><strong>和上题一样。</strong></p>
]]></content>
  </entry>
  <entry>
    <title>蓝桥杯题目详解</title>
    <url>/2022/12/01/%E8%93%9D%E6%A1%A5%E6%9D%AF%E9%A2%98%E7%9B%AE%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="2022-12-01"><a href="#2022-12-01" class="headerlink" title="2022 - 12 - 01"></a>2022 - 12 - 01</h1><h2 id="一、高斯日记"><a href="#一、高斯日记" class="headerlink" title="一、高斯日记"></a>一、高斯日记</h2><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment">    题目标题:高斯日记</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    大数学家高斯有个好习惯:无论如何都要记日记。</span><br><span class="hljs-comment">    </span><br><span class="hljs-comment">    他的日记有个与众不同的地方，他从不注明年月日，而是用一个整数代替，比如:4210</span><br><span class="hljs-comment">    </span><br><span class="hljs-comment">    后来人们知道，那个整数就是日期，它表示那一天是高斯出生后的第几天。这或许也是个好习惯，它时时刻刻提醒自己时间易逝。</span><br><span class="hljs-comment">    </span><br><span class="hljs-comment">    高斯出生于:1777年4月30日。</span><br><span class="hljs-comment">    </span><br><span class="hljs-comment">    在高斯发现的一个重要定理的日记上标注着:5343，因此可算出那天是:1791年12月15日。</span><br><span class="hljs-comment">    </span><br><span class="hljs-comment">    高斯获得博士学位的那天日记上标着:8113</span><br><span class="hljs-comment">    </span><br><span class="hljs-comment">    请你算出高斯获得博士学位的年月日。</span><br><span class="hljs-comment">    </span><br><span class="hljs-comment">    提交答案的格式是:yyyy-mm-dd，例如:1980-03-21</span><br><span class="hljs-comment">    </span><br><span class="hljs-comment">    请严格按照格式，通过浏览器提交答案。</span><br><span class="hljs-comment">    </span><br><span class="hljs-comment">    注意:只提交这个日期，不要写其它附加内容，比如:说明性的文字。</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iomanip&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isLeap</span><span class="hljs-params">(<span class="hljs-type">int</span> y)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>((y % <span class="hljs-number">4</span> == <span class="hljs-number">0</span> &amp;&amp; y % <span class="hljs-number">100</span> != <span class="hljs-number">0</span>) || y % <span class="hljs-number">400</span> == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> y = <span class="hljs-number">1777</span>, m = <span class="hljs-number">4</span>, d = <span class="hljs-number">30</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8112</span>; ++i) &#123;<br>        ++ d;<br>        <span class="hljs-keyword">if</span>(m == <span class="hljs-number">1</span> || m == <span class="hljs-number">3</span> || m == <span class="hljs-number">5</span> || m == <span class="hljs-number">7</span> || m == <span class="hljs-number">8</span> || m == <span class="hljs-number">10</span> || m == <span class="hljs-number">12</span>) &#123;<br>            <span class="hljs-keyword">if</span>(m == <span class="hljs-number">12</span> &amp;&amp; d &gt; <span class="hljs-number">31</span>) &#123;<br>                y ++;<br>                d = <span class="hljs-number">1</span>;<br>                m = <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(m != <span class="hljs-number">12</span> &amp;&amp; d &gt; <span class="hljs-number">31</span>) &#123;<br>                d = <span class="hljs-number">1</span>;<br>                ++ m;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span>(m == <span class="hljs-number">2</span>) &#123;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-built_in">isLeap</span>(y) &amp;&amp; d &gt; <span class="hljs-number">29</span>) &#123;<br>                    ++ m;<br>                    d = <span class="hljs-number">1</span>;<br>                &#125;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">isLeap</span>(y) &amp;&amp; d &gt; <span class="hljs-number">28</span>) &#123;<br>                    ++ m;<br>                    d = <span class="hljs-number">1</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(d &gt; <span class="hljs-number">30</span>) &#123;<br>                ++ m;<br>                d = <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; y &lt;&lt; <span class="hljs-string">&#x27;-&#x27;</span> &lt;&lt; <span class="hljs-built_in">setfill</span>(<span class="hljs-string">&#x27;0&#x27;</span>) &lt;&lt; <span class="hljs-built_in">setw</span>(<span class="hljs-number">2</span>) &lt;&lt; m &lt;&lt; <span class="hljs-string">&#x27;-&#x27;</span> <br>    &lt;&lt; <span class="hljs-built_in">setfill</span>(<span class="hljs-string">&#x27;0&#x27;</span>) &lt;&lt; <span class="hljs-built_in">setw</span>(<span class="hljs-number">2</span>) &lt;&lt; d;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><strong>本题简单题，想完成该题主要是必须要逻辑清晰。</strong></p>
<ul>
<li><strong>我设了三个变量 y，m，d，代表高斯出生的年，月，日。</strong></li>
<li><strong>在接下来的 for 循环内 d 每加一代表过去一天，然后再进行判断是否需要进位（即如果天数大于该月的总天数，就将月份数加一，号数变为一号）。</strong></li>
<li><strong>我将月份天数进行分类，按 28&#x2F;29&#x2F;30 天的为一边，31 天的为另一边。</strong></li>
<li><strong>在 28&#x2F;29&#x2F;30 这一边因为包含二月，它有闰年之分，所以我又将二月单独挑出来判断是否为闰年，再以大于 28&#x2F;29 天为条件进位，其他的就是普通的大于 30 天就进位。</strong></li>
<li><strong>同样的，在 31 天那边也有特殊情况——12 月，在12 月 31 号后年也要进位，因此将它单独挑出来，分为 12 月和其他的。</strong></li>
<li><strong>输出注意补零。</strong></li>
</ul>
<p><strong>PS. 今天是我出生后的 6981 天，令人感叹。</strong></p>
<h1 id="2022-12-02"><a href="#2022-12-02" class="headerlink" title="2022 - 12 - 02"></a>2022 - 12 - 02</h1><h2 id="二、-递归-母牛的故事"><a href="#二、-递归-母牛的故事" class="headerlink" title="二、[递归]母牛的故事"></a>二、[递归]母牛的故事</h2><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment">	有一头母牛，它每年年初生一头小母牛。</span><br><span class="hljs-comment">	每头小母牛从第四个年头开始，每年年初也生一头小母牛。</span><br><span class="hljs-comment">	请编程实现在第n年的时候，共有多少头母牛？</span><br><span class="hljs-comment">	</span><br><span class="hljs-comment">	输入数据由多个测试实例组成，每个测试实例占一行，包括一个整数</span><br><span class="hljs-comment">	n(0&lt;n&lt;55)，n的含义如题目中描述。n=0表示输入数据的结束，不做处理。</span><br><span class="hljs-comment">	</span><br><span class="hljs-comment">	对于每个测试实例，输出在第n年的时候母牛的数量。</span><br><span class="hljs-comment">	（输入n = 1 时，结果也为 1）</span><br><span class="hljs-comment">	每个输出占一行。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getAllnum</span><span class="hljs-params">(<span class="hljs-type">long</span> <span class="hljs-type">long</span> a[])</span> </span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">4</span> ; i &lt; <span class="hljs-number">54</span>; ++ i) &#123;<br>        a[i] = a[i - <span class="hljs-number">1</span>] + a[i - <span class="hljs-number">3</span>]; <span class="hljs-comment">// ***</span><br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> s[<span class="hljs-number">54</span>] &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;;<br>    <span class="hljs-built_in">getAllnum</span>(s);<br>    <span class="hljs-keyword">while</span>(cin &gt;&gt; n) &#123;<br>        <span class="hljs-keyword">if</span>(!n) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <br>        <span class="hljs-keyword">if</span>(n &lt; <span class="hljs-number">5</span>) cout &lt;&lt; n &lt;&lt; endl;<br>        <span class="hljs-keyword">else</span> &#123;<br>            cout &lt;&lt; s[n - <span class="hljs-number">1</span>] &lt;&lt; endl;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><strong>本题靠找规律。</strong></p>
<p><strong>已知有四种牛 —— 一岁的，两岁的，三岁的，四岁能生育的。由于 n &#x3D; 1 时，输出 1，可知，第一年的成牛不生育，因此我们可以列出六年内各种牛的数量来找规律。</strong></p>
<p><strong>设成牛第 n 年的数量为 a[n]，一岁的为 b[n]， 二岁的为 c[n], 三岁的为 d[n]。可得规律为：</strong></p>
<p><strong>a[n] &#x3D; a[n - 1] + b[n - 1]</strong></p>
<p><strong>b[n] &#x3D; c[n - 1]</strong></p>
<p><strong>c[n] &#x3D; a[n - 1]</strong></p>
<p><strong>d[n] &#x3D; a[n]</strong></p>
<p><strong>设牛的总数为 s[n]，有：</strong></p>
<p><strong>s[n] &#x3D; a[n] + b[n] + c[n] +d[n]</strong></p>
<p>​	    <strong>&#x3D; a[n - 1] + b[n - 1] + c[n - 1] + a[n - 1] + a[n]</strong></p>
<p>​		<strong>&#x3D; a[n - 1] + b[n - 1] + c[n - 1] + d[n - 1] + a[n - 1] +b [n - 1]</strong></p>
<p>​		<strong>&#x3D; s[n - 1] + a[n - 2] + b[n - 2] + c[n - 2]</strong></p>
<p>​		<strong>&#x3D; s[n - 1] + a[n - 3] + b[n - 3] + c[n - 3] + a[n - 3]</strong></p>
<p>​		<strong>&#x3D; s[n - 1] + a[n - 3] + b[n - 3] + c[n - 3] + d[n - 3]</strong></p>
<p>​		<strong>&#x3D; s[n - 1] + s[n - 3]</strong></p>
<p><strong>找规律可知 s[i] &#x3D; i (i &#x3D; 1, 2, 3, 4) , 并且已知 n &lt; 55，因此得到规律后很轻松就能直接算出 54 年内的每一年牛的数量，存在数组里直接按 n 的大小调用即可。</strong></p>
<h1 id="2022-12-04"><a href="#2022-12-04" class="headerlink" title="2022 - 12 - 04"></a>2022 - 12 - 04</h1><h2 id="一、蓝桥杯算法提高-选择排序"><a href="#一、蓝桥杯算法提高-选择排序" class="headerlink" title="一、蓝桥杯算法提高-选择排序"></a>一、蓝桥杯算法提高-选择排序</h2><figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">/*</span><br><span class="hljs-comment">	排序，顾名思义，是将若干个元素按其大小关系排出一个顺序。形式化描述如下：</span><br><span class="hljs-comment">	</span><br><span class="hljs-comment">	有n个元素a[1]，a[2]，…，a[n]，</span><br><span class="hljs-comment">	</span><br><span class="hljs-comment">	从小到大排序就是将它们排成一个新顺序a[i[1]]&lt; a[i[2]]&lt; …&lt; a[i[n]]</span><br><span class="hljs-comment">	</span><br><span class="hljs-comment">	i[k]为这个新顺序。</span><br><span class="hljs-comment">	</span><br><span class="hljs-comment">	选择排序的思想极其简单，每一步都把一个最小元素放到前面，如果有多个相等的最小元素，选择排位较考前的放到当前头部。</span><br><span class="hljs-comment">	</span><br><span class="hljs-comment">	还是那个例子：&#123;3  1  5  4  2&#125;：</span><br><span class="hljs-comment">	</span><br><span class="hljs-comment">	第一步将1放到开头（第一个位置），也就是交换3和1，</span><br><span class="hljs-comment">	即swap(a[0],a[1])得到&#123;1  3  5  4  2&#125;</span><br><span class="hljs-comment">	</span><br><span class="hljs-comment">	第二步将2放到第二个位置，也就是交换3和2，</span><br><span class="hljs-comment">	即swap(a[1],a[4])得到&#123;1  2  5  4  3&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">	第三步将3放到第三个位置，也就是交换5和3，</span><br><span class="hljs-comment">	即swap(a[2],a[4])得到&#123;1  2  3  4  5&#125;</span><br><span class="hljs-comment">	</span><br><span class="hljs-comment">	第四步将4放到第四个位置，也就是交换4和4，</span><br><span class="hljs-comment">	即swap(a[3],a[3])得到&#123;1  2  3  4  5&#125;</span><br><span class="hljs-comment">	</span><br><span class="hljs-comment">	第五步将5放到第五个位置，也就是交换5和5，</span><br><span class="hljs-comment">	即swap(a[4],a[4])得到&#123;1  2  3  4  5&#125;</span><br><span class="hljs-comment">	</span><br><span class="hljs-comment">	输入n个整数，输出选择排序的全过程。</span><br><span class="hljs-comment">	要求使用递归实现。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-type">int</span>&amp; a, <span class="hljs-type">int</span>&amp; b)</span> </span>&#123;<br>    <span class="hljs-type">int</span> tep = a;<br>    a = b;<br>    b = tep;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getSmallest</span><span class="hljs-params">(<span class="hljs-type">int</span> a[], <span class="hljs-type">int</span> n)</span> </span>&#123;<br>    <span class="hljs-type">int</span> k = <span class="hljs-number">0</span>, min = a[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; ++i) &#123;<br>        <span class="hljs-keyword">if</span>(min &gt; a[i]) &#123;<br>            min = a[i];<br>            k = i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> k; <br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">selectionSort</span><span class="hljs-params">(<span class="hljs-type">int</span> a[], <span class="hljs-type">int</span> n)</span> </span>&#123;<br>    <span class="hljs-type">static</span> <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">static</span> <span class="hljs-type">int</span>* c = a;<br>    <br>    <span class="hljs-keyword">if</span>(i &gt; n - <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> ;<br>    <br>    <span class="hljs-type">int</span> x = <span class="hljs-built_in">getSmallest</span>(a, n - i);<br>    <span class="hljs-built_in">swap</span>(a[<span class="hljs-number">0</span>], a[x]);<br>    <br>    cout &lt;&lt; <span class="hljs-string">&quot;swap(a[&quot;</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot;], a[&quot;</span> &lt;&lt; x + i<br>        &lt;&lt; <span class="hljs-string">&quot;]):&quot;</span>;<br>        <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i)<br>        cout &lt;&lt; c[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    cout &lt;&lt; endl;<br>    <br>    ++ i;<br>    <span class="hljs-built_in">selectionSort</span>(a + <span class="hljs-number">1</span>, n);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a[<span class="hljs-number">100</span>];<br>    <span class="hljs-type">int</span> n; cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>        cin &gt;&gt; a[i];<br>    &#125;<br>    <span class="hljs-built_in">selectionSort</span>(a, n);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="二、蓝桥杯算法提高-插入排序"><a href="#二、蓝桥杯算法提高-插入排序" class="headerlink" title="二、蓝桥杯算法提高-插入排序"></a>二、蓝桥杯算法提高-插入排序</h2><figure class="highlight inform7"><table><tr><td class="code"><pre><code class="hljs inform7">/*<br>	排序，顾名思义，是将若干个元素按其大小关系排出一个顺序。形式化描述如下：<br>	有n个元素a<span class="hljs-comment">[1]</span>，a<span class="hljs-comment">[2]</span>，…，a<span class="hljs-comment">[n]</span>，从小到大排序就是将它们排成一个新顺序<br>	a<span class="hljs-comment">[i<span class="hljs-comment">[1]</span>]</span>&lt; a<span class="hljs-comment">[i<span class="hljs-comment">[2]</span>]</span>&lt; …&lt; a<span class="hljs-comment">[i<span class="hljs-comment">[n]</span>]</span><br>	i<span class="hljs-comment">[k]</span>为这个新顺序。<br>	插入排序，顾名思义，是通过插入操作完成排序。其直觉和方法来源于打牌时安排<br>	牌的方法。每次摸起一张牌，你都会将其插入到现在手牌中它按顺序应在的那个位<br>	置。插入排序每一步都类似这个摸牌过程。<br>	比如现在有整数数组：&#123;3,  1,  5,  4,  2&#125;<br>    第一步：插入3  得到新序列&#123;3&#125;<br>    第二步：插入1  得到新序列&#123;1  3&#125;<br>    第三步：插入5  得到新序列&#123;1  3  5&#125;<br>    第四步：插入4  得到新序列&#123;1  3  4  5&#125;<br>    第五步：插入2  得到新序列&#123;1  2  3  4  5&#125;<br>    为了看程序中如何完成插入过程，我们以第五步为例：<br>    初始时：1  3  4  5  2<br>    将2存入临时变量tmp<br>    将下标j指向2之前的元素5，然后根据tmp和a<span class="hljs-comment">[j]</span>的大小关系决定该元素是否应该后移。<br>    如果a<span class="hljs-comment">[j]</span>&gt; tmp，则将a<span class="hljs-comment">[j]</span>后移到a<span class="hljs-comment">[j+1]</span>，序列变成1  3  4  5  5。<br>    将下标j前移<br>    判断a<span class="hljs-comment">[j]</span>&gt; tmp，后移a<span class="hljs-comment">[j]</span>到a<span class="hljs-comment">[j+1]</span>，得到1  3  4  4  5<br>    将下标j前移<br>    判断a<span class="hljs-comment">[j]</span>&gt; tmp，后移a<span class="hljs-comment">[j]</span>到a<span class="hljs-comment">[j+1]</span>，得到1  3  3  4  5<br>    因为a<span class="hljs-comment">[j]</span>&lt; =tmp，所以将tmp放回a<span class="hljs-comment">[j+1]</span>，得到  1  2  3  4  5<br>    现在，输入n个整数，根据以上算法，输出插入排序的全过程。<br>*/<br>#include&lt;iostream&gt;<br>using namespace std;<br><br>void print(int a<span class="hljs-comment">[]</span>, int n) &#123;<br>    for(int i = 0; i &lt; n; ++i)<br>        cout &lt;&lt; a<span class="hljs-comment">[i]</span> &lt;&lt; &#x27; &#x27;;<br>    cout &lt;&lt; endl;<br>&#125;<br><br>int main()<br>&#123;<br>    int n; cin &gt;&gt; n;<br>    int a<span class="hljs-comment">[100]</span>;<br>    for(int i = 0; i &lt; n; ++i)<br>        cin &gt;&gt; a<span class="hljs-comment">[i]</span>;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Insert element<span class="hljs-subst">[1]</span>:\n&quot;</span> &lt;&lt; <span class="hljs-string">&quot;Init:&quot;</span><br>        &lt;&lt; a<span class="hljs-comment">[0]</span> &lt;&lt; <span class="hljs-string">&quot;\nFinal:&quot;</span> &lt;&lt; a<span class="hljs-comment">[0]</span> &lt;&lt; endl;<br>    <br>    for(int i = 1; i &lt; n; ++i) &#123;<br>        int key = a<span class="hljs-comment">[i]</span>;<br>        int j = i - 1;<br>        cout &lt;&lt; <span class="hljs-string">&quot;Insert element<span class="hljs-subst">[&quot; &lt;&lt; i + 1 &lt;&lt; &quot;]</span>:&quot;</span> &lt;&lt; endl;<br>        cout &lt;&lt; <span class="hljs-string">&quot;Init:&quot;</span>;<br>        print(a, i + 1);<br>        while(j &gt; -1 &amp;&amp; key &lt; a<span class="hljs-comment">[j]</span>) &#123;<br>            a<span class="hljs-comment">[j + 1]</span> = a<span class="hljs-comment">[j]</span>;<br>            j--;<br>            cout &lt;&lt; <span class="hljs-string">&quot;Move  back:&quot;</span>;<br>            print(a, i + 1);<br>        &#125;<br>        a<span class="hljs-comment">[j + 1]</span> = key;<br>        cout &lt;&lt; <span class="hljs-string">&quot;Final:&quot;</span>;<br>        print(a, i + 1);<br>    &#125;<br>    return 0;<br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
  </entry>
</search>
